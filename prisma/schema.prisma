generator client {
  provider = "prisma-client-js"
}

// this only generated once
// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../libs/shared/src/prisma"
//   outputToNestJsResourceStructure = "true"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "false"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = ""
//   fileNamingStyle                 = "camel"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  users       User[]

  @@map("roles")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  status    String    @default("Active")
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  teachers  Teacher[]
  students  Student[]

  @@map("users")
}

model Teacher {
  id        Int                  @id @default(autoincrement())
  email     String               @unique
  firstName String
  lastName  String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now())
  user      User                 @relation(fields: [userId], references: [id])
  userId    Int
  students  TeachersOnStudents[]

  @@map("teachers")
}

model Student {
  id        Int                  @id @default(autoincrement())
  email     String               @unique
  firstName String
  lastName  String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now())
  user      User                 @relation(fields: [userId], references: [id])
  userId    Int
  teachers  TeachersOnStudents[]

  @@map("students")
}

model TeachersOnStudents {
  teacher      Teacher @relation(fields: [teacherEmail], references: [email])
  teacherEmail String
  student      Student @relation(fields: [studentEmail], references: [email])
  studentEmail String

  @@id([teacherEmail, studentEmail])
  @@map("teachers_on_students")
}
